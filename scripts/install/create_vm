#!/bin/bash
#
# Copyright (C) 2013 Red Hat Inc.
# Author: Salim Badakhchani <sal@redhat.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

# Uncomment to debug script
#set -x


## Declare default configuration options

# Distro information
VMNAME=${VMNAME:="kojak-CentOS-6.6-x86_64"}
VMHOME=${VMHOME:="/var/lib/libvirt/images"}
TMPDIR=${TMPDIR:="${HOME}/kojak"}
DISTDIR=${DISTDIR:="CentOS/6.6/x86_64"}
# Sources and configuration
CFGDIR=${CFGDIR:="${TMPDIR}/cfg/${DISTDIR}"}
KSCFG=${KSCFG:="${CFGDIR}/kojak-ks.cfg"}
KJKCFG=${KJKCFG:="${CFGDIR}/kojak.cfg"}
SRCLOC=${SRCLOC:="http://mirror.centos.org/centos/6/os/x86_64/"}

# Virtual machine specifications
OS_TYPE=${OS_TYPE:="linux"}
OS_VARIANT=${OS_VARIANT:="rhel6"}
ARCH=${ARCH:="x86_64"}
VCPU=${VCPU:="2"}
VMMEM=${VMMEM:="4096"}
VMDISK=${VMDISK:="8192M"}

# Check user priviledges
if [ $(id -u) != 0 ]; then
    echo -e "\n# This script requires root priviledges to run"
exit
fi

## Interactive configuration options

config() {
    while true
    do
    # Execute menu configuration options
    welcome_header

    # Virtual machine name
    echo -e "\n01. Please specify a name for the virtual machine."
    read -e -i "${VMNAME}" -p "VMNAME = " VMNAME
    VMNAME="${VMNAME:=$VMNAME}"

    # Virtual machine home
    echo -e "\n02. Please specify the directory where vm image will be created."
    read -e -i "${VMHOME}" -p "VMHOME = " VMHOME
    VMHOME="${VMHOME:=$VMHOME}"

    # Temp directory
    echo -e "\n03. Please specify a temporay directory used for the installation."
    read -e -i "${TMPDIR}" -p "TMPDIR = " TMPDIR
    TMPDIR="${TMPDIR:=$TMPDIR}"

    # Distribution directory
    echo -e "\n04. Please specify your OS distribution directory."
    read -e -i "${DISTDIR}" -p "DISTDIR = " DISTDIR
    DISTDIR="${DISTDIR:=$DISTDIR}"

    # Source location
    echo -e "\n05. Please specify the location of your distribution sources."
    read -e -i "${SRCLOC}" -p "SRCLOC = " SRCLOC
    SRCLOC="${SRCLOC:=$SRCLOC}"

    # Configuration directories
    echo -e "\n06. Please specify the location of the Kojak configuration directory."
    read -e -i "${CFGDIR}" -p "CFGDIR = " CFGDIR
    CFGDIR="${TMPDIR}/cfg/${DISTDIR}"

    # Kickstart configuration
    echo -e "\n07. Please specify the location of your kickstart configuration file."
    read -e -i "${KSCFG}" -p "KSCFG = " KSCFG
    KSCFG="${KSCFG:=$KSCFG}"

    # Virtual machine OS type
    echo -e "\n08. Please specify your vm OS type."
    read -e -i "${OS_TYPE}" -p "OS_TYPE = " OS_TYPE
    OS_TYPE="linux"

    # Virtual machine OS variant
    echo -e "\n09. Please specify your vm OS variant."
    read -e -i "${OS_VARIANT}" -p "OS_VARIANT = " OS_VARIANT
    OS_VARIANT="${OS_VARIANT}"

    # Virtual machine CPU architecture
    echo -e "\n10. Please specify your cpu architecture."
    read -e -i "${ARCH}" -p "ARCH = " ARCH
    ARCH="${ARCH}"

    # Virtual machine VCPU's 
    echo -e "\n11. Please specify the number of vcpu's."
    read -e -i "${VCPU}" -p "VCPU = " VCPU
    VCPU="${VCPU}"

    # Virtual machine memory allocation
    echo -e "\n12. Please specify your vm memory size allocation."
    read -e -i "${VMMEM}" -p "VMMEM = " VMMEM
    VMMEM="${VMMEM}"
    
    # Virtual machine disk space allocation
    echo -e "\n13. Please specify your vm disk size allocation."
    read -e -i "${VMDISK}" -p "VMDISK = " VMDISK
    VMDISK="${VMDISK}"
    
    echo
    while true; do
    read -p ">> Do you want to save the configuration options supplied? [Y/n]" OPTS
        case $OPTS in
            [Yy]* ) save && echo -e "\n>> Configuration saved..." && sleep 1 && menu ;;
            [Nn]* ) menu ;;
            * ) echo ">> Invalid Option";;
        esac
    done

    done
    exit
}

## Save configuration options

save() {
    mkdir -p ${CFGDIR}
    echo -e "# Kojak SAVED configuration options.\n
VMNAME=${VMNAME}
VMHOME=${VMHOME}
TMPDIR=${TMPDIR}
DISTDIR=${DISTDIR}
SRCLOC=${SRCLOC}
CFGDIR=${CFGDIR}
KSCFG=${KSCFG}
OS_TYPE=${OS_TYPE}
OS_VARIANT=${OS_VARIANT}
ARCH=${ARCH}
VCPU=${VCPU}
VMMEM=${VMMEM}
VMDISK=${VMDISK}" > ${CFGDIR}/kojak.cfg
}

## Main function

main () {

main_header

if [ -z "${KSCFG}" ]; then
    echo "# Missing path to Kickstart file"
    exit 1
fi

echo "# Copying Kickstart file"
if [ ! -d ${CFGDIR} ]; then
    mkdir -p ${CFGDIR}
    cp -f kojak-ks.cfg "${KSCFG}"
else
    cp -f kojak-ks.cfg "${KSCFG}"
fi

if [ ! -z "${KJKCFG}" ]; then
    echo -e "# Saved options in ${KJKCFG}"
    source ${KJKCFG} > /dev/null 2>&1
else
    echo -e "# Default options in ${KJKCFG}"
    source ${KJKCFG} > /dev/null 2>&1
fi

VMDOMAIN=$(virsh list --all | grep ${VMNAME} | awk '{print $(NF-2)}')
if [ ! "${VMDOMAIN}" ]; then
    echo -e "# No pre-existing Kojak vm"
else 
    while true; do
    read -p "# Found an existing VM with the same name...Do you want to destroy it?`echo $'\n>> '` [Y/n] " yn
    case $yn in
        [Yy]* ) virsh undefine ${VMNAME} && virsh destroy ${VMNAME} && virsh vol-delete --pool default ${VMNAME}.img > /dev/null 2>&1
    break
    ;;
        [Nn]* ) menu
    ;;
        * ) echo ">> Invalid Option";;
    esac
    done
fi

echo -e "# Restarting Virtualization"
sudo service libvirtd restart > /dev/null 2>&1

echo -e "# Allocating Diskspace"
sudo fallocate -l ${VMDISK} ${VMHOME}/${VMNAME}.img

echo -e "# Installating Packages\n"
virt-install \
-n ${VMNAME} \
--accelerate \
--ram ${VMMEM} \
--vcpus ${VCPU} \
--os-type ${OS_TYPE} \
--os-variant ${OS_VARIANT} \
--arch ${ARCH} \
--disk ${VMHOME}/${VMNAME}.img \
--initrd-inject "${KSCFG}" \
--location ${SRCLOC} \
--extra-args "ks=file:/$(basename ${KSCFG}) console=tty0 console=ttyS0,115200 serial rd_NO_PLYMOUTH" \
--console pty \
--nographics
exit
}

welcome_header() {
    clear
    echo -e "\n################################################################################"
    echo -e "#                                                                              #"
    echo -e "#                   !!! Welcome to Kojak...Koji in a box !!!                   #"
    echo -e "#                                                                              #\n"
}

main_header() {
    clear
    echo -e "\n################################################################################"
    echo -e "#                                                                              #"
    echo -e "#                  *** Running Kojak... Who loves you baby ***                 #"
    echo -e "#                                                                              #\n"
}

menu_msg_00() {
    echo -e ">> Select virtualization engine you want to use.\n"
}

menu_msg_01() {
    echo -e ">> Select which configuration options you want to use.\n"
}

menu_msg_02() {
    echo -e ">> Select which configuration file you want to use.\n"
}

menu () {
if [ ! -d ${TMPDIR} ]; then
    mkdir -p ${TMPDIR} 
fi
welcome_header
menu_msg_00
PS3='Please select from the virtualization options: '
options=("Libvirt" "VirtualBox" "Quit")
select opt in "${options[@]}"
do
    case $opt in
        "Libvirt")
            echo "Libvirt"
            clear
            welcome_header

            menu_msg_01
            PS3='Please select from the configuration options: '
            options=("Default" "Custom" "Saved" "Print" "Clear" "Quit")
            select opt in "${options[@]}"
            do
                case $opt in
                    "Default")
                        echo "Default"
                        main
                        ;;
                    "Custom")
                        echo "Custom"
                        config
                        exit
                        ;;
                    "Saved")
                        CFG=$(find "$TMPDIR" -type f  -name "kojak.cfg")
                        if [ ! -z "${CFG}" ]; then
                        welcome_header
                        menu_msg_02
                        prompt="Please select a file:"
                        options=( $(find "$TMPDIR" -type f  -name "kojak.cfg") )
                        PS3="$prompt "
                        select opt in "${options[@]}" "Quit" ; do
                            if (( REPLY == 1 + ${#options[@]} )) ; then
                                clear && menu
                            elif (( REPLY > 0 && REPLY <= ${#options[@]} )) ; then
                                export KJKCFG="$opt"
                                main ${KJKCFG}
                            else
                                echo "Invalid option."
                            fi
                            done
                        else
                            echo -e "\n>> No configuration files found!"
                            sleep 1
                            welcome_header
                            menu
                        fi
                        ;;
                    "Print")
                        if [ ! -f "${KJKCFG}" ]; then
                            welcome_header
                            echo -e "# Kojak DEFAULT configuration options.\n
            # VMNAME=${VMNAME}
            # VMHOME=${VMHOME}
            # TMPDIR=${TMPDIR}
            # DISTDIR=${DISTDIR}
            # SRCLOC=${SRCLOC}
            # CFGDIR=${CFGDIR}
            # KSCFG=${KSCFG}
            # KJKCFG=${KJKCFG}
            # OS_TYPE=${OS_TYPE}
            # OS_VARIANT=${OS_VARIANT}
            # ARCH=${ARCH}
            # VCPU=${VCPU}
            # VMMEM=${VMMEM}
            # VMDISK=${VMDISK}"
                        else
                            clear
                            welcome_header
                            cat ${KJKCFG}
                        fi
                        echo -e "\nPress any key to return to the configuration menu: "
                        read
                        menu
                        ;;
                    "Clear")
                        CFG=$(find "$TMPDIR" -type f  -name "kojak.cfg")
                        if [ -f "${KSCFG}" ]; then
                            rm -f "${KSCFG}"
                        fi
                        if [ ! -z "${CFG}" ]; then
                            for cfg in ${CFG}; do
                            rm -rf ${cfg}
                            done
                            welcome_header
                            echo -e "\n>> Removed saved configuration files."
                            sleep 1
                            menu
                        else
                            echo -e "\n>> No saved configuration files found!"
                            sleep 1
                            menu
                        fi
                        ;;
                    "Quit")
                        exit
                        ;;
                    *) echo -e ">> Invalid Option"
                        ;;
                esac
            done
            break
                        ;;
        "VirtualBox")
            echo "VirtualBox"
            OS="fedora"
            ID=$(vagrant global-status | awk 'FNR == 4 {print}'| awk '{print $1}')
            # Install packages
            [[ ! "$(rpm -qa | grep vagrant)" ]] && yum -y install https://dl.bintray.com/mitchellh/vagrant/vagrant_1.6.5_x86_64.rpm
            if [ ! $(which VBoxManage) ]
            then
                [[ ! -f /etc/yum.repos.d/virtualbox.repo ]] && wget -P /etc/yum.repos.d/ http://download.virtualbox.org/virtualbox/rpm/$OS/virtualbox.repo
                yum -y install VirtualBox kmod-VirtualBox
            fi
            [[ -d /root/workspace/vm ]] && rm -rf /root/workspace/vm
            mkdir -p /root/workspace/vm
            cd /root/workspace/vm
            # Init virtual machine
            vagrant init chef/centos-6.5
            vagrant up --provider=virtualbox
            # Connect to virtual machine
            vagrant ssh $ID
            exit
            ;;
        "Quit")
            exit
            ;;
        *) echo -e ">> Invalid Option"
            ;;
    esac
done
break
}

clear
welcome_header
menu_msg_00
menu
