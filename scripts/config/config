#!/bin/bash
#
# Copyright (C) 2013 Red Hat Inc.
# Author: Salim Badakhchani <sal@redhat.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

# Uncomment to debug script
#set -x

# Declare variable
export PROG="koji"
export USER="koji"
export PRODUCT="rcm-mw-tools"
export ARCH="x86_64"
export MAVEN="maven3-3.0.3-4"

# Begin Koji configuration
su -l ${USER} -c "

# Configure Koji
${PROG} add-host kojibuilder1.localdomain x86_64
${PROG} add-host-to-channel kojibuilder1.localdomain appliance
${PROG} add-host-to-channel kojibuilder1.localdomain createrepo
${PROG} add-host-to-channel kojibuilder1.localdomain livecd
${PROG} add-host-to-channel kojibuilder1.localdomain maven
${PROG} add-host-to-channel kojibuilder1.localdomain vm
${PROG} grant-permission repo kojira
${PROG} grant-permission build kojibuilder1.localdomain

# Add product tags
${PROG} add-tag ${PRODUCT} --arches ${ARCH} --maven-support --include-all
${PROG} add-tag ${PRODUCT}-candidate --arches ${ARCH} --maven-support --include-all
${PROG} add-tag ${PRODUCT}-build --arches ${ARCH} --maven-support --include-all

# Add tag inheritance
${PROG} add-tag-inheritance ${PRODUCT}-candidate ${PRODUCT} --priority 0
${PROG} add-tag-inheritance ${PRODUCT}-build ${PRODUCT}-candidate --priority 0

# Add target
${PROG} add-target ${PRODUCT}-candidate ${PRODUCT}-build ${PRODUCT}-candidate

# Add external repo
${PROG} add-external-repo -t ${PRODUCT}-build centos-mirror http://mirror.centos.org/centos/6/os/x86_64/

# Add groups
# build
${PROG} add-group ${PRODUCT}-build build
${PROG} add-group-pkg ${PRODUCT}-build build bash bzip2 cpio diffutils fedora-release findutils gawk gcc gcc-c++ info make redhat-rpm-config rpm-build sed shadow-utils unzip util-linux-ng which xz

# srpm-build
${PROG} add-group ${PRODUCT}-build srpm-build
${PROG} add-group-pkg ${PRODUCT}-build srpm-build bash curl cvs fedora-release fedpkg gnupg2 make redhat-rpm-config rpm-build shadow-utils

# appliance-build
${PROG} add-group ${PRODUCT}-build appliance-build
${PROG} add-group-pkg ${PRODUCT}-build appliance-build appliance-tools bash coreutils grub parted perl policycoreutils selinux-policy shadow-utils

# maven-build
${PROG} add-group ${PRODUCT}-build maven-build
${PROG} add-group-pkg ${PRODUCT}-build maven-build bash coreutils java-1.7.0-openjdk-devel maven3 subversion liberation-sans-fonts liberation-serif-fonts liberation-mono-fonts git

# livecd-build
${PROG} add-group ${PRODUCT}-build livecd-build
${PROG} add-group-pkg ${PRODUCT}-build livecd-build bash bzip2 coreutils cpio diffutils fedora-logos fedora-release findutils gawk gcc gcc-c++ grep gzip info livecd-tools make patch policycoreutils python-dbus redhat-rpm-config rpm-build sed selinux-policy-targeted shadow-utils squashfs-tools tar unzip util-linux which yum

# wrapper-build
${PROG} add-group ${PRODUCT}-build wrapper-rpm-build
${PROG} add-group-pkg ${PRODUCT}-build wrapper-rpm-build bash redhat-release redhat-release-server redhat-rpm-config rpm-build shadow-utils

# Ramp up capacity
${PROG} edit-host --capacity 10.0 kojibuilder1.localdomain

# Add required build packages
${PROG} add-pkg --owner=kojiadmin ${PRODUCT} bash binutils

# Adding Maven
if [ -d "/opt/kojak" ]; then
    ${PROG} import --create-build /opt/kojak/pkgs/${MAVEN}.src.rpm /opt/kojak/pkgs/${MAVEN}.noarch.rpm
    ${PROG} add-pkg --owner=kojiadmin ${PRODUCT} maven3
    ${PROG} tag-build ${PRODUCT}-candidate ${MAVEN}
else
    git clone https://github.com/sbadakhc/kojak.git ~/workspace/kojak
    ${PROG} import --create-build ~/workspace/kojak/pkgs/${MAVEN}.src.rpm ~/workspace/kojak/pkgs/${MAVEN}.noarch.rpm
    ${PROG} add-pkg --owner=kojiadmin ${PRODUCT} maven3
    ${PROG} tag-build ${PRODUCT}-candidate ${MAVEN}
fi
"

# Install Maven3
MVNRPM=$(rpm -q maven3)
if [ ! -z ${MVNRPM} ]; then
        echo -e "${MVNRPM} already installed"
else
        yum -y localinstall /opt/kojak/pkgs/maven3-3.0.3-4.noarch.rpm 
fi

rm -rf /home/koji/.koji/
rm -rf /etc/pki/koji/
rm -rf /etc/pki/CA/serial*
rm -rf /etc/pki/CA/index*
mkdir -p /home/koji/.koji
chown koji:apache /home/koji/.koji
mkdir -p /etc/pki/koji
cd /etc/pki/koji
mkdir {certs,confs,private}
touch /etc/pki/CA/index.txt
echo 01 > /etc/pki/CA/serial
cd -

# Create the koji server, component and user SSL certs
# Use default certificate authority name
CANAME="koji"

# Get the systems host and domain name.
HOSTNAME="koji"
DOMAINNAME="localdomain"

# Certificate directories.
CRTHOME="/etc/pki/koji"
CLCRTHOME="/home/koji/.koji"
CNF="/etc/pki/tls/openssl.cnf"

# Begin certificate generation
echo -e "Generating server key and certificate authority\n"
cd $CRTHOME

export CANAME HOSTNAME DOMAINNAME CRTHOME CLCRTHOME CNF 

# Genrate the private key and certificate authority
openssl genrsa -out private/${CANAME}_ca_cert.key 2048
openssl req -config ${CNF} -new -x509 -days 3650 -subj \
"/C=XX/ST=SomeState/L=SomeCity/O=SomeOrganization/OU=SomeOrganizationalUnit/CN=${USER}/emailAddress=${USER}@${DOMAINNAME}" \
-key private/${CANAME}_ca_cert.key -out ${CANAME}_ca_cert.crt -extensions v3_ca

echo -e "Generating component keys and signing certificates\n"
echo -e "y\ny" > ${CRTHOME}/response.txt

# Create certificates for the koji components.
for USER in koji kojiadmin kojira kojiweb kojihub kojibuilder
do
    echo "creating certificate for ${USER} ..."
    openssl genrsa -out ${CRTHOME}/certs/${USER}.key 2048
   
    cat ${CNF} | sed '0,/${HOSTNAME}/s//'${USER}'/' > ${CRTHOME}/${USER}-ssl.cnf

    openssl req -config ${CRTHOME}/${USER}-ssl.cnf -new -days 3650 -subj \
    "/C=XX/ST=SomeState/L=SomeCity/O=SomeOrganization/OU=SomeOrganizationalUnit/CN=${USER}/emailAddress=${USER}@${DOMAINNAME}" \
    -out certs/${USER}.csr -key ${CRTHOME}/certs/${USER}.key
   
    < ${CRTHOME}/response.txt openssl ca -config ${CRTHOME}/${USER}-ssl.cnf -keyfile ${CRTHOME}/private/${CANAME}_ca_cert.key -cert ${CRTHOME}/${CANAME}_ca_cert.crt \
    -out ${CRTHOME}/certs/${USER}.crt -outdir ${CRTHOME}/certs -infiles ${CRTHOME}/certs/${USER}.csr
    cat ${CRTHOME}/certs/${USER}.crt ${CRTHOME}/certs/${USER}.key > ${CRTHOME}/${USER}.pem
    mv -f ${CRTHOME}/${USER}-ssl.cnf ${CRTHOME}/confs/${USER}-ssl.cnf

    echo "...done"
done

rm -f response.txt

# Copy the client certficates to the koji users home directory.
echo -e "Deploying certificates...\n"

cp -f /etc/pki/koji/kojiadmin.pem /home/koji/.koji/client.crt
cp -f /etc/pki/koji/${CANAME}_ca_cert.crt /home/koji/.koji/clientca.crt
cp -f /etc/pki/koji/${CANAME}_ca_cert.crt /home/koji/.koji/serverca.crt

# Set the appropriate permissions
chown -R koji:apache /home/koji/.koji/
service postgresql restart
service httpd restart
service jenkins restart
service kojid start
service kojira restart

echo -e "\nUpdating permissions..."
echo -e "UPDATE user_perms SET user_id = '5' where user_id = '4';\
UPDATE host SET user_id = '5' where user_id = '4';\
DELETE from users where name = 'kojibuilder1.localdomain';\q" >> /tmp/kojibuilder.sql
su -l koji -c "psql koji koji < /tmp/kojibuilder.sql"
rm /tmp/kojibuilder.sql

# Installing Jenkins Koji Plugin"
cp -p /etc/sysconfig/jenkins /etc/sysconfig/jenkins.orig
cat > /tmp/jenkins.patch << 'EOF'
--- /etc/sysconfig/jenkins.orig 2014-06-02 17:19:23.000000000 +0200
+++ /etc/sysconfig/jenkins  2014-06-05 15:22:00.665823455 +0200
@@ -26,7 +26,7 @@
 # Be careful when you change this, as you need to update
 # permissions of $JENKINS_HOME and /var/log/jenkins.
 #
-JENKINS_USER="jenkins"
+JENKINS_USER="koji"

 ## Type:        string
 ## Default:     "-Djava.awt.headless=true"
EOF
patch -p0 < /tmp/jenkins.patch
rm -f /tmp/jenkins.patch
tar zxfv /opt/kojak/scripts/contrib/jenkins/jenkins.tar.gz -C /var/lib
wget http://http://updates.jenkins-ci.org/latest/ssh-credentials.hpi /var/lib/jenkins/plugins
wget http://updates.jenkins-ci.org/latest/git-client.hpi /var/lib/jenkins/plugins
wget http://updates.jenkins-ci.org/latest/scm-api.hpi /var/lib/jenkins/plugins
wget http://updates.jenkins-ci.org/latest/credentials.hpi /var/lib/jenkins/plugins
wget http://updates.jenkins-ci.org/latest/git.hpi -P /var/lib/jenkins/plugins
wget http://updates.jenkins-ci.org/latest/koji-plugin.hpi -P /var/lib/jenkins/plugins
chown -R koji:koji /var/lib/jenkins /var/cache/jenkins /var/log/jenkins

echo -e "\nBringing the system up..."
service postgresql restart
service httpd restart
service kojid start
service kojira restart
service jenkins restart

echo -e "\nService status..."
service kojid status
service kojira status

echo -e "\nConfiguration complete...Kojak is OK"
