#!/usr/bin/python

import sys
import optparse
import subprocess
import tempfile
import os.path
import shutil
import glob
import hashlib
import sgmllib

SCRIPTDIR = os.path.abspath(os.path.dirname(sys.argv[0]))

def run(cmd, chdir=None, fatal=True, verbose=False):
    output = ''
    olddir = None
    if chdir:
        olddir = os.getcwd()
        os.chdir(chdir)
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    output, dummy = proc.communicate()
    if verbose:
        print output
    ret = proc.returncode
    if olddir:
        os.chdir(olddir)
    if ret and fatal:
        msg = 'error running: %s, return code was %s' % (' '.join(cmd), ret)
        if not verbose:
            msg += ', output was:\n%s' % output
        raise RuntimeError, msg
    return ret, output

def get_child(node, name):
    for child in node.childNodes:
        if hasattr(child, 'tagName') and child.tagName == name:
            return child
    return None

def get_text(node):
    if node:
        return node.firstChild.data
    return None

class PomParser(sgmllib.SGMLParser):
    def __init__(self, verbose=0, parent_wins=False):
        sgmllib.SGMLParser.__init__(self, verbose)
        self._proj_data = {}
        self._parent_data = {}
        self.groupId = None
        self.artifactId = None
        self.version = None
        self._in_parent = False
        self._in_project = False
        self._parent_wins = parent_wins
        self.data = None

    def _get_data(self, attr):
        if self._proj_data.has_key(attr) and not self._parent_wins:
            return self._proj_data[attr]
        elif self._parent_data.has_key(attr):
            return self._parent_data[attr]
        else:
            return None

    @property
    def groupId(self):
        self._get_data('groupId')

    @property
    def artifactId(self):
        self._get_data('artifactId')

    @property
    def version(self):
        self._get_data('version')

    def handle_data(self, data):
        if self.data is not None:
            self.data.append(data)

    def start_project(self, attrs):
        self._in_project = True

    def start_parent(self, attrs):
        self._in_parent = True

    def end_project(self):
        self._in_project = False

    def end_parent(self):
        self._in_parent = False

    def start_groupid(self, attrs):
        self.data = []

    def end_groupid(self):
        self.groupId = "".join(self.data)

    def start_artifactid(self, attrs):
        self.data = []

    def end_artifactid(self):
        self.artifactId = "".join(self.data)

    def start_version(self, attrs):
        self.data = []

    def end_version(self):
        self.version = "".join(self.data)

def parse_parent(pom):
    fd = open(pom, "r")
    # custom parser because the xml on input is typically full of shit
    parser = PomParser(parent_wins=True)
    parser.feed(fd.read())
    fd.close()
    parser.close()
    print "parse_parent: got groupId:", parser.groupId, "artifactid:", parser.artifactId, parser.version
    return parser.groupId, parser.artifactId, parser.version

def parent_gav(workdir):
    poms = glob.glob(os.path.join(workdir, '*.pom'))
    if len(poms) != 1:
        raise RuntimeError, 'only one .pom may be associated with a G:A:V'
    return parse_parent(poms[0])

def parse_pom(pom):
    fd = open(pom, "r")
    # custom parser because the xml on input is typically full of shit
    parser = PomParser(parent_wins=False)
    parser.feed(fd.read())
    fd.close()
    parser.close()
    print "parse_pom: got groupId:", parser.groupId, "artifactid:", parser.artifactId, parser.version
    return parser.groupId, parser.artifactId, parser.version

def repo_path(opts, pom):
    g, a, v = parse_pom(pom)
    g = g.replace('.', '/')
    return os.path.join(g, a, v)

def make_checksums(artifact):
    md5 = hashlib.md5()
    sha1 = hashlib.sha1()
    with file(artifact) as f:
        while True:
            content = f.read(8192)
            if not content:
                break
            md5.update(content)
            sha1.update(content)
    with file(artifact + '.md5', 'w') as f:
        f.write(md5.hexdigest())
    with file(artifact + '.sha1', 'w') as f:
        f.write(sha1.hexdigest())

def import_local(opts, gav, workdir):
    poms = glob.glob(os.path.join(workdir, '*.pom'))
    if len(poms) != 1:
        raise RuntimeError, 'only one .pom may be associated with a G:A:V'
    if not os.path.isdir(opts.local_repo):
        raise RuntimeError, 'local repo directory %s does not exist' % opts.local_repo
    repopath = repo_path(opts, poms[0])
    destdir = os.path.join(opts.local_repo, repopath)
    if not os.path.exists(destdir):
        os.makedirs(destdir)
    for artifact in glob.glob(os.path.join(workdir, '*')):
        artifact_name = os.path.basename(artifact)
        destfile = os.path.join(destdir, artifact_name)
        if os.path.exists(destfile):
            print '%s exists in %s, not overwriting' % (artifact_name, destdir)
        else:
            shutil.copy(artifact, destfile)
            make_checksums(destfile)
    print '%s available at %s' % (gav, destdir)

def download_and_import(opts, gav):
    workdir = tempfile.mkdtemp()
    success = False
    try:
        cmd = [os.path.join(SCRIPTDIR, 'get-maven-artifacts'), gav]
        for repo in opts.repos:
            cmd.extend(['--repo', repo])
        run(cmd, chdir=workdir, verbose=opts.verbose)
        if opts.keep:
            print '%s downloaded to %s' % (gav, workdir)
        cmd = [os.path.join(SCRIPTDIR, 'import-maven')]
        if opts.tag:
            cmd.extend(['--tag', opts.tag])
        if opts.owner:
            cmd.extend(['--owner', opts.owner])
        cmd.extend(glob.glob(os.path.join(workdir, '*')))
        ret, output = run(cmd, verbose=opts.verbose)
        if not opts.verbose:
            print output.strip().splitlines()[-1]
        if opts.local_repo:
            import_local(opts, gav, workdir)
        parent = parent_gav(workdir)
        if opts.recurse and parent:
            success = download_and_import(opts, '%s:%s:%s' % parent)
        else:
            success = True
    except RuntimeError, e:
        print e.args[0]
    finally:
        if not opts.keep:
            shutil.rmtree(workdir)
    return success

def get_gavs(opts, args):
    gavs = []
    if opts.file:
        for filename in args:
            with file(filename) as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('#') or not line:
                        continue
                    gavs.append(line)
    else:
        gavs = args
    return gavs

parser = optparse.OptionParser(usage='%prog groupId:artifactId:version...')
parser.add_option('-t', '--tag', help='Tag to import into')
parser.add_option('--repo', dest='repos', metavar='REPOURL',
                  help='Additional repo to check (may be used multiple times)', action='append',
                  default=[])
parser.add_option('-r', '--recurse', action='store_true', help='Recursively import parent GAVs')
parser.add_option('-k', '--keep', action='store_true', help='Keep downloaded artifacts')
parser.add_option('-l', '--local-repo', help='Import downloaded artifacts into the given local repo')
parser.add_option('--owner', default=os.environ['USER'], help='Owner of the package')
parser.add_option('-f', '--file', action='store_true', help='Arguments are files which contain a list of G:A:Vs to import (one per line)')
parser.add_option('-v', '--verbose', action='store_true', help='Verbose output')

opts, args = parser.parse_args()
if not args:
    if opts.file:
        parser.error('You must provide a list of G:A:Vs to import')
    else:
        parser.error('You must provide a G:A:V to import')

for gav in get_gavs(opts, args):
    success = download_and_import(opts, gav)
    if not success:
        sys.exit(1)
